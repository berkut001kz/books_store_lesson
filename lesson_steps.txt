Кітаптар дүкенің құру сабағының істелу қадамдары

1 қадам - githup-та жаңа project құру

project атын жазып 
gitignore қосып мәнің Visual Studio деп таңдау сосын
license қосып мәнің The Unlicense деп таңдап, құру батырмасын басамыз






2 қадам - githup-тағы project-ті өзіміздін компқа жүктеу

	Жасыл түсті Code дегенді басып көрсетілген сілтемені көшіріп алып Console-ді ашамыз

	Concole-ге 

	Бұйрықтар

		dir - арқылы тұрған орындағы барлық папка,файлдарды көру
		cd - арқылы керекті папкаға ауысу(кіру)
		git clone - деп жазып көшіріп алған сілтемені қою

		мысал
		git clone https://github.com/you_name/you_project.git сосын enter басамыз


	сақталған файлдын ішінде келесілер болуы керек
	.gitignore
	LICENSE
	README.md














3 қадам - Не істейтінімізді аңықтап аламыз - алғашқы мәселе

	github-та әңгіме құруға болатын жер Issues(Мәселелер) бөлімі бар
	
	Тапсырыс бойынша әңгіме - әдісі бойынша істегеніміз өте жақсы болады	

	Тапсырыс бойынша әңгіме - деген өзінді пайдаланушы сияқты ойлап әр бөлімді талқылап сипаттама беріп жаспар жазу

	Тапсырыс бойынша әңгіме - нақыл сөзі - кім істеп жатыр, не істеп жатыр және не үшін істеп жатыр.

	github-тағы project-ке кіріп Issues(Мәселелер) деген бөлімге кіріп, Алғашқы мәселені құрамыз

	
	Әнгіме

	Мен интернеттегі кітаптар дүкеніне кірдім ең алдымен нестеймін

	Кітапты аты бойынша іздеймін

	мәселе іздеуге байланысты 
	
	! ЕСКЕРТУ
	Іздеудін ауқымы өте үлкен егер біз бір сәтте бәрін ойластырсақ оны қиындатып аламыз
	Мәселені бір-бірлеп шешу дұрыс болады
	Көбінің қателігі бәрін бірден ойластыруында

	алдымен іздеуді аты бойынша жасап алуымыз керек сосын керегін біртіндеп қосабереміз



!!!#1 Алғашқы мәселе - Мәселе тақырыбы: Келушы кітапты атымен іздейді















4 Қадам - C# жұмыс ортасын дайындау - Solution құру

	Console арқылы
	Бұйрықтар:

	dotnet - дегенді аңықтау қажет
	dotnet new sln - жаңа Solution құрады атауын тұрған орынындағы папка атауы мен атайды
	
	Келесідей жазу шықса сәтті құрылды
	The template "Solution File" was created successfully. 

	сосын dir арқылы қосылғаның көрседе болады

Console арқылы
git бұйрықтары:



git status - githup-қа қосылмаған әрекеттерді көрсетеді

1. Қосылмаған әрекеттерді қызыл жазумен көрсетеді 
Мысал:
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        books_store_lesson.sln




git add . - githup-қа қосылмаған әрекеттерді қосады

1. Қосылған әрекеттірді жасыл жазумен көрсетеді
Мысал:
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   books_store_lesson.sln



git commit -m - Қосылатын жаңа әрекетке пікір жазады

мысал:
git commit -m "Шешім жасаңыз"


git push - қосылған әрекеттерді интернетке жүктейді яғни githup-қа

















5 қадам - Жаңа папка құрамыз және соның ішіне class library құрамыз

Console арқылы

Console бұйрығы

md - жаңа папка құрады
мысал
md domain

сосын

жаңа class library құрамыз

Console бұйрығы

dotnet new classlib --output "domain/Books_Store_Lesson" --name "Books_Store_Lesson"

Сәтті болса келесідей шығады

The template "Class library" was created successfully.

Processing post-creation actions...
Running 'dotnet restore' on domain/Books_Store_Lesson\Books_Store_Lesson.csproj...
  Determining projects to restore...
  Restored C:\Users\berkut001\source\vsprojects\ASP\books_store_lesson\domain\Books_Store_Lesson\Books_Store_Lesson.cspr
oj (in 209 ms).
Restore succeeded.


Solution- жай мәтіндік файл

Solution-ға жаңа құрған Class library-ді қосамыз

не екенің түсінбедім 
Console бұйрығы
dotnet sln add domain/Books_Store_Lesson\Books_Store_Lesson.csproj

сәтті болса келесідей шығады

Project `domain\Books_Store_Lesson\Books_Store_Lesson.csproj` added to the solution.

не екенің түсінбедім 
Console бұйрығы
type Books_Store_Lesson.sln




Visual Studio-ны ашып 

Books_Store_Lesson.sln 

Solution-ды таңдап ашамыз


ашылған project-тін ішіндегі class1 дегенге кіріп class1-таңдап
 ctrl + r + r деп атын Book деп өзгертеміз















6 қадам - Book class-та -  Келушы кітапты атымен іздейді

!!!#1 Алғашқы мәселе - Мәселе тақырыбы: Келушы кітапты атымен іздейді

Алғашқы мәселе жөңінде кітапқа нелер керек

1. Қайталанбайтын сан - Id
2. Кітап аты - Title

public class Book
{
   #region Getters

   public int Id { get; }
   public string Title { get; }

   #endregion Getters

   #region Constructor

    public Book(int id, string title)
    {
        this.Id = id;
        this.Title = title;
    }

    #endregion Constructor

}


соңғы өзгерістерді сақтаймыз

git бұйрықтары

git add .
git status

Сәтті болса
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   books_store_lesson.sln
        new file:   domain/Books_Store_Lesson/Book.cs
        new file:   domain/Books_Store_Lesson/Books_Store_Lesson.csproj

git commit -m "Book class-тын жеке ақпаратын анықтадық"

git push











7 қадам - Interface құрамыз

атын IBookRepository деп қойамыз


public interface IBookRepository
    {
        Book[] GetAllByTitle(string titlePart);
    }



git add .
git commit -m "Interface құрдық аты IBookRepository"
git push















8 қадам - жаңа solution папкасын құрамыз - Visual Studio арқылы

Visual Studio арқылы

ең бірінші solution папкасының үстінең
тышқанның оң жағын басып Add -ға cursor-ды апарғанда шығады

New Solution Folder  - дегенді таңдып

атын infrastructure деп қойамыз
















9 қадам - жаңа solution infrastructure папкасының ішіне жаңа class library қосамыз

class library - өздігінен іске қосыла алмайды


infrastructure үстіне барып 
тышқанның оң жағын басып Add - new project таңдап ішінең 

class library таңдап атын Books_Store_Lesson.Memory деп қойып 

орның ...\books_store_lesson\infrastructure осылай көрсетіп

құрамыз


ашылған жаңа project-тін ішіндегі class атын class1 дегенді үстінең ctrl+r+r деп 
BookRepository деп өзгертеміз



сосын IBookRepository interface-ті мұра етіп аламыз

алайда қате шығады себебі IBookRepository interface-сі басқа books_store_lesson project-тын ішінде

енді екеуін байланыстыру керек бір-бірін көруі үшін

Байланыстыру

Books_Store_Lesson.Memory ішіндегі 
Dependencies дегеннің үстінең тышқанның оң жағын басып
Add Project Reference  дегенді таңдап соның ішіндегі
Projects дегенге кіріп ішіндегі керекті project-ті таңдап OK батырмасын басамыз

сосын

Books_Store_Lesson.Memory.csproj дегеннің ішіне осындай жазу қосылады

  <ItemGroup>
    <ProjectReference Include="..\..\domain\Books_Store_Lesson\Books_Store_Lesson.csproj" />
  </ItemGroup>


Бәрі сәтті болса келесідей жазамыз

Where - using System.Linq; арқылы істейді
using System.Linq;

    public class BookRepository : IBookRepository
    {

        private readonly Book[] books = new[]
        {
            new Book(1,"Art Of Programming"),
            new Book(2,"Refactoring"),
            new Book(3,"C Programming Language"),
        };


        public Book[] GetAllByTitle(string titlePart)
        {
            // Where(book => book.Title.Contains(titlePart)) - true немесе false қайтарады
            // Where(book => book.Title.Contains(titlePart)) - егер Programming сөзі біррет немесе оданда көп кезіксе true қайтарады
            // .ToArray(); - қайтадан тізбек түрінде қайтарады
            return books.Where(book => book.Title.Contains(titlePart)).ToArray();
        }
    }



Соңғы өзгерістерді сақтаймыз

 git add .
 git status

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
 modified:   books_store_lesson.sln
 new file:   infrastructure/Books_Store_Lesson.Memory/BookRepository.cs
 new file:   infrastructure/Books_Store_Lesson.Memory/Books_Store_Lesson.Memory.csproj

 git commit -m "Book Repository - Кітап қоймасының орындалуын жадқа қосыңыз"














10 қадам - view(көрініс) project-ті құрамыз


сайтта көзге көрінетін бөлігі 
мысалы:
html,css,js, т.б


жаңадан solution folder құрамыз атын presentation деп қойамыз

presentation үстіне апарып тышқанның оң жағын басып Add ішінең New Project таңдап

ішінең

ASP.NET Core Web App(Model-View-Controller) таңдап

атын Books_Store_Lesson.Web деп қойып 
орның ...\books_store_lesson\presentation деп көрсетіп
жаңадан Project құрамыз


сосын 

Books_Store_Lesson.Web үстіне апарып тышқанның оң жағын басап 

Set as Startup Project дегенді басамыз

басқаннаң кейін еш әрекет болмаған сияқты болады 


алдынғы екі Project өздігінең іске қосыла алмаса осы Project өздігінең қосыла алады

қосқанда браузерге ақпарат шығарады


Қосатын жерде жасыл үшбұрышта IIS Express деп тұру керек соны басамыз 
егер Docer немесе басқа жазу болса онда оны IIS Express деп таңдап алу керек 
сосын қосамыз қосқанда браузер ашылады

Браузер ашылып 

Welcome
Learn about building Web apps with ASP.NET Core.

деген сөз көрсеңіз сәтті болғаны

еңді соңғы өзгерістерді сақтаймыз

git add .
git status 
git commit -m "Веб-қосымша жасаңыз"
git push







































































